//tests for sscanf


#test sscanf_test_1 

int res9 = 95;
int res = res9;
char str10[] = "617 hjgb 823984 3423412";
st_sscanf((char*)str10, "%u", &res9);
sscanf((char*)str10, "%u", &res);
ck_assert_uint_eq(res9, res);

#test sscanf_test_2 

int res=8, res5=1209;
char str10[] = "0x233 617 hjgb 823984 3423412";
st_sscanf((char*)str10, "%i", &res5);
sscanf((char*)str10, "%i", &res);
ck_assert_int_eq(res5, res);  

#test sscanf_test_7 
    char fstr[] = "%c%c%c%c";
    char str[] = "abcd";
    int16_t a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);

    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_8 
    char fstr[] = "%c %c %c      %c";
    char str[] = "1 a 3   c           ";
    int16_t a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_10 
    char fstr[] = "%c %c %c %c";
    char str[] = "tttt";
    int16_t a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);

    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_11 
    char fstr[] = "%c%c%c%c";
    char str[] = "\\\n\t\t\t";
    int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_12 
    char fstr[] = "%c %c %c %c";
    char str[] = "z ' ' /";
    int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);



#test sscanf_test_14 
    char fstr[] = "%c %c %c %c";
    char str[] = "z *'15 ";
    int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_16 
    char fstr[] = "%1c %c %c %0c";
    char str[] = "z *'17 ";
    int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_18 
    char fstr[] = "%c %c %c %c";
    char str[] = "z *'19 ";
    int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_20 
    char fstr[] = "%c %c %c %c";
    char str[] = "z *'21 ";
    int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);



#test sscanf_test_25 
    long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
    const char fstr[] = "%ld %ld %ld %ld";
    const char str[] = "555 666 777 888";

    int32_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int32_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_26 
    int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
    const char str[] = "1337 21 5008 3000";
    const char fstr[] = "%hd %hd %hd %hd";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_27 
    long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
    const char str[] = "1337 21 5008 300004";
    const char fstr[] = "%ld %ld %ld %ld";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);



#test sscanf_test_31 
    long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
    const char str[] = "1337";
    const char fstr[] = "%15ld %1ld %1ld %1ld";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);



#test sscanf_test_33 
    long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
    const char str[] = "1337";
    const char fstr[] = "%15ld %1ld %1ld %1ld";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_34 
    long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
    const char str[] = "1337";
    const char fstr[] = "%15ld %1ld %1ld %1ld";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_35 
    long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
    const char str[] = "1337";
    const char fstr[] = "%15ld %1ld %1ld %1ld";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_36 
    long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
    const char str[] = "11337 ++3 -5 ------4";
    const char fstr[] = "%ld %ld %ld %ld";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_39 
    long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
    const char str[] = "1 01 10 0";
    const char fstr[] = "%ld %ld %ld %ld";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);




#test sscanf_test_42 
    long a1 = 0, a2 = 0, c1 = 0, c2 = 0;
    char b1 = 0, b2 = 0, d1 = 0, d2 = 0;
    const char str[] = "300500-600+700+400";
    const char fstr[] = "%li%c%li%c";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_43 
    long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
    const char str[] = "  55555 f f f5555555 ddd   4    3    1 ";
    const char fstr[] = "%li %ld %ld %li";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_44 
    long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
    const char str[] = "0xFFF 0xA123123 0x123123 0x0";
    const char fstr[] = "%li %ld %ld %li";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_45 
    long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
    const char str[] = " 0xFFFF 0xf 0xf 0xf5555555 ddd   4    3    1 ";
    const char fstr[] = "%li %ld %ld %li";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);



#test sscanf_test_48 
    char s1[512] = {'\0'};
    char s2[512] = {'\0'};
    char s3[512] = {'\0'};
    char s4[512] = {'\0'};

    char s5[512] = {'\0'};
    char s6[512] = {'\0'};
    char s7[512] = {'\0'};
    char s8[512] = {'\0'};

    const char str[] = "Aboba Floppa Keppa Shleppa Anuroba";
    const char fstr[] = "%s %s %s %s";

    int16_t res1 = st_sscanf((char*)str, fstr, s1, s2, s3, s4);
    int16_t res2 = sscanf((char*)str, fstr, s5, s6, s7, s8);

    ck_assert_int_eq(res1, res2);

    ck_assert_str_eq(s1, s5);
    ck_assert_str_eq(s2, s6);
    ck_assert_str_eq(s3, s7);
    ck_assert_str_eq(s4, s8);


#test sscanf_test_49 
    char s1[512] = {'\0'};
    char s2[512] = {'\0'};
    char s3[512] = {'\0'};
    char s4[512] = {'\0'};

    char s5[512] = {'\0'};
    char s6[512] = {'\0'};
    char s7[512] = {'\0'};
    char s8[512] = {'\0'};

    long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

    const char str[] = "Aboba 123 Floppa -3 Keppa 4444Shleppa 333Anuroba 3";
    const char fstr[] = "%s%ld%s%d%s%d%s";

    int16_t res1 = st_sscanf((char*)str, fstr, s1, &a1, s2, &b1, s3, &c1, s4, &d1);
    int16_t res2 = st_sscanf((char*)str, fstr, s5, &a2, s6, &b2, s7, &c2, s8, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);

    ck_assert_str_eq(s1, s5);
    ck_assert_str_eq(s2, s6);
    ck_assert_str_eq(s3, s7);
    ck_assert_str_eq(s4, s8);



#test sscanf_test_52 
    char s1[512] = {'\0'};
    char s2[512] = {'\0'};
    char s3[512] = {'\0'};
    char s4[512] = {'\0'};

    char s5[512] = {'\0'};
    char s6[512] = {'\0'};
    char s7[512] = {'\0'};
    char s8[512] = {'\0'};

    const char str[] = "aboba\tshlepa\tasdfasdf\tasdfasdf";
    const char fstr[] = "%1s%1s%1s%1s";

    int16_t res1 = st_sscanf((char*)str, fstr, s1, s2, s3, s4);
    int16_t res2 = sscanf((char*)str, fstr, s5, s6, s7, s8);

    ck_assert_int_eq(res1, res2);

    ck_assert_str_eq(s1, s5);
    ck_assert_str_eq(s2, s6);
    ck_assert_str_eq(s3, s7);
    ck_assert_str_eq(s4, s8);



#test sscanf_test_56 
    int d1 = 0, d2 = 0, b1 = 0, b2 = 0, a1 = 0, a2 = 0;
    long v1, v2;

    const char str[] = "1 1 1 1 1 -1";
    const char fstr[] = "%1s %5d %1s %1s %d %ld %d";

    char s1[512] = {'\0'};
    char s2[512] = {'\0'};
    char s3[512] = {'\0'};
    char s4[512] = {'\0'};
    char s5[512] = {'\0'};
    char s6[512] = {'\0'};

    int16_t res1 = st_sscanf((char*)str, fstr, s1, &a1, s2, s3, &b1, &v1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, s4, &a2, s5, s6, &b2, &v2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_str_eq(s1, s2);
    ck_assert_str_eq(s3, s4);
    ck_assert_str_eq(s5, s6);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(d1, d2);


  #test sscanf_test_57 
    long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
    int32_t n1 = 0, n2 = 5;

    const char str[512] = "50 160 70 80";
    const char fstr[512] = "%li %li %n %li %li";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &n1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &n2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(n1, n2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_58 
    int n1 = 1, n2 = 5;

    char s1[512] = {'\0'};
    char s2[512] = {'\0'};
    char s3[512] = {'\0'};
    char s5[512] = {'\0'};
    char s6[512] = {'\0'};
    char s7[512] = {'\0'};

    const char str[] = "cbobErobM fl? asdfasdflkasdf asdfasdf asdfasdf 88888";
    const char fstr[] = "%s %s %n %s";

    int32_t res1 = st_sscanf((char*)str, fstr, s1, s2, &n1, s3);
    int32_t res2 = sscanf((char*)str, fstr, s5, s6, &n2, s7);

    ck_assert_int_eq(res1, res2);

    ck_assert_int_eq(n1, n2);
    ck_assert_str_eq(s1, s5);
    ck_assert_str_eq(s2, s6);
    ck_assert_str_eq(s3, s7);


#test sscanf_test_59 
    int n1 = 0, n2 = 5;

    const char str[512] = "50 60 70 80";
    const char fstr[512] = "%n";

    int16_t res1 = st_sscanf((char*)str, fstr, &n1);
    int16_t res2 = sscanf((char*)str, fstr, &n2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(n1, n2);


#test sscanf_test_60 
    long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
    int32_t n1 = 0, n2 = 5;

    const char str[] = "50 60 70 80";
    const char fstr[] = "%li %li %n %li %li";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &n1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &n2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(n1, n2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_61 
    long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
    int n1 = 0, n2 = 5;

    const char str[] = "50 60 70 80";
    const char fstr[] = "%li %li %n %li %li";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &n1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &n2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(n1, n2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);



#test sscanf_test_78 
    uint32_t a1, a2;
    const char str[] = "F";
    const char fstr[] = "%X";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_79 
    uint32_t a1, a2;
    const char str[] = "0xFFFFFFFF";
    const char fstr[] = "%X";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);



#test sscanf_test_82 
    uint32_t a1, a2;
    const char str[] = "";
    const char fstr[] = "%X";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);


#test sscanf_test_83 
    uint32_t a1, a2;
    const char str[] = "qF";
    const char fstr[] = "%X";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);



#test sscanf_test_85 
    uint16_t a1, a2;
    const char str[] = "F";
    const char fstr[] = "%hX";
    uint16_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint16_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);



#test sscanf_test_88 
    uint32_t a1, a2;
    const char str[] = "0xFF0x0xFFF 0xFFxFF";
    const char fstr[] = "%X";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_90 
    uint32_t a1, a2;
    const char str[] = "tqwqpl";
    const char fstr[] = "%X";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);


#test sscanf_test_91 
    uint32_t a1, a2;
    const char str[] = "abcdef";
    const char fstr[] = "%X";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_92 
    uint32_t a1, a2;
    const char str[] = "-f";
    const char fstr[] = "%X";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_93 
    uint32_t a1, a2;
    const char str[] = "f";
    const char fstr[] = "%x";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_94 
    uint32_t a1, a2;
    const char str[] = "0xfffffffffffffffffff";
    const char fstr[] = "%x";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);



#test sscanf_test_97 
    uint32_t a1, a2;
    const char str[] = "";
    const char fstr[] = "%x";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);


#test sscanf_test_98 
    uint32_t a1, a2;
    const char str[] = "qF";
    const char fstr[] = "%x";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);



#test sscanf_test_100 
    uint16_t a1, a2;
    const char str[] = "ff";
    const char fstr[] = "%hx";
    uint16_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint16_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);



#test sscanf_test_103 
    uint32_t a1, a2;
    const char str[] = "0xFF0x0xFFF 0xFFxFF";
    const char fstr[] = "%x";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_105 
    uint32_t a1, a2;
    const char str[] = "tqwqpl";
    const char fstr[] = "%x";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);


#test sscanf_test_106 
    uint32_t a1, a2;
    const char str[] = "abcdef";
    const char fstr[] = "%x";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_107 
    uint32_t a1, a2;
    const char str[] = "-f";
    const char fstr[] = "%x";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_108 
    uint32_t a1, a2;
    const char str[] = "123531FFF";
    const char fstr[] = "%2X";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_109 
    uint32_t a1, a2;
    const char str[] = "123531FFF";
    const char fstr[] = "%2x";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_110 
    uint32_t a1, a2;
    const char str[] = "777";
    const char fstr[] = "%o";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_111 
    uint32_t a1, a2;
    const char str[] = "0x7777777777777777777777";
    const char fstr[] = "%o";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_112 
    uint32_t a1, a2;
    const char str[] = "0x";
    const char fstr[] = "%o";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_113 
    uint32_t a1, a2;
    const char str[] = "0X";
    const char fstr[] = "%o";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_114 
    uint32_t a1, a2;
    const char str[] = "";
    const char fstr[] = "%o";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);


#test sscanf_test_115 
    uint32_t a1, a2;
    const char str[] = "q1";
    const char fstr[] = "%o";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);



#test sscanf_test_117 
    uint16_t a1, a2;
    const char str[] = "12";
    const char fstr[] = "%ho";
    uint16_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint16_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_120 
    uint32_t a1, a2;
    const char str[] = "0x12320x213x123213";
    const char fstr[] = "%o";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);



#test sscanf_test_122 
    uint32_t a1, a2;
    const char str[] = "tqwqpl";
    const char fstr[] = "%o";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);


#test sscanf_test_123 
    uint32_t a1, a2;
    const char str[] = "01234567";
    const char fstr[] = "%o";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_124 
    uint32_t a1, a2;
    const char str[] = "-66";
    const char fstr[] = "%o";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_125 
    uint32_t a1, a2;
    const char str[] = "123531";
    const char fstr[] = "%2o";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);



#test sscanf_test_129 
    int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;
    const char str[] = "0xFFFF 0xAAAA 0x7123 0xBBC1FF";
    const char fstr[] = "%p %p %p %p";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_ptr_eq(a1, a2);
    ck_assert_ptr_eq(b1, b2);
    ck_assert_ptr_eq(c1, c2);
    ck_assert_ptr_eq(d1, d2);


#test sscanf_test_130 
    int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;
    const char str[] = "0xFFFF 0xAAAA 0x7123 0xBBC1FF";
    const char fstr[] = "%p %p %p %p";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_ptr_eq(a1, a2);
    ck_assert_ptr_eq(b1, b2);
    ck_assert_ptr_eq(c1, c2);
    ck_assert_ptr_eq(d1, d2);


#test sscanf_test_131 
    int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;
    const char str[] = "0xFFFF 0xAAAA 0x7123 0xBBC1FF";
    const char fstr[] = "%p %p %p %p";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_ptr_eq(a1, a2);
    ck_assert_ptr_eq(b1, b2);
    ck_assert_ptr_eq(c1, c2);
    ck_assert_ptr_eq(d1, d2);



#test sscanf_test_137 
    const char str[] = "%%%";
    const char fstr[] = "%%%%%%";
    int32_t res1 = st_sscanf((char*)str, fstr);
    int32_t res2 = sscanf((char*)str, fstr);

    ck_assert_int_eq(res1, res2);



#test sscanf_test_139 
    int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;

    const char str[] = "0xFFFF 0xAAA 7123 0xBBC1FF";
    const char fstr[] = "%p %p %p %p";

    int32_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int32_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_ptr_eq(a1, a2);
    ck_assert_ptr_eq(b1, b2);
    ck_assert_ptr_eq(c1, c2);
    ck_assert_ptr_eq(d1, d2);


#test sscanf_test_140 
    char *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;

    const char str[] = "0x4 0x3 0x2 0x1";
    const char fstr[] = "%p %p %p %p";

    int32_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int32_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_ptr_eq(a1, a2);
    ck_assert_ptr_eq(b1, b2);
    ck_assert_ptr_eq(c1, c2);
    ck_assert_ptr_eq(d1, d2);


#test sscanf_test_141 
    int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;

    const char str[] = "03033 0333 0123 0123 0x123 0xFFFFF 0xBBC1FF";
    const char fstr[] = "%p %p %p %p";

    int32_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int32_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_ptr_eq(a1, a2);
    ck_assert_ptr_eq(b1, b2);
    ck_assert_ptr_eq(c1, c2);
    ck_assert_ptr_eq(d1, d2);


#test sscanf_test_142 
    int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;

    const char str[] = "0xABCDEF 0xAAA 7123 0xBBC1FF";
    const char fstr[] = "%p %p %p %p";

    int32_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int32_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_ptr_eq(a1, a2);
    ck_assert_ptr_eq(b1, b2);
    ck_assert_ptr_eq(c1, c2);
    ck_assert_ptr_eq(d1, d2);


#test sscanf_test_143 
    int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;

    const char str[] = "NULL";
    const char fstr[] = "%p %p %p %p";

    int32_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int32_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_ptr_eq(a1, a2);
    ck_assert_ptr_eq(b1, b2);
    ck_assert_ptr_eq(c1, c2);
    ck_assert_ptr_eq(d1, d2);


#test sscanf_test_151 
    uint32_t a1 = 0, a2 = 0;
    const char str[] = "0xFFFFFFFF";
    const char fstr[] = "%X";
    uint32_t res1 = st_sscanf((char*)str, fstr, &a1);
    uint32_t res2 = sscanf((char*)str, fstr, &a2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);

#test sscanf_test_152 
  long double a1 = 1, a2 = 0, b1 = 1, b2 = 0, c1 = 1, c2 = 0, d1 = 1, d2 = 0;

  const char str[] = "53.1 -4.1135e6 41.3333 +2.0001";
  const char fstr[] = "%Lf %3f %Lf %Lf";

  int16_t res1 = st_sscanf((char *)str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);


#test sscanf_test_156
    unsigned int a1 = 0, a2 = 0, b1 = 0, b2 = 0;   
    char str[] = "4294967295321120 0xffffffff";
    const char fstr[] = "%u %u";
    int16_t res1 = st_sscanf(str, fstr, &a1, &b1);
    int16_t res2 = sscanf(str, fstr, &a2, &b2);
    ck_assert_uint_eq(a1, a2);
    ck_assert_uint_eq(b1, b2);


#test sscanf_test_160
    unsigned int a1 = 0, a2 = 0, b1 = 0, b2 = 0;   
    char str[] = "4294967295321120 0xffffffff";
    const char fstr[] = "%i %i";
    int16_t res1 = st_sscanf(str, fstr, &a1, &b1);
    int16_t res2 = sscanf(str, fstr, &a2, &b2);
      ck_assert_int_eq(res1, res2);
    ck_assert_uint_eq(a1, a2);
    ck_assert_uint_eq(b1, b2);


#test sscanf_test_164
    unsigned int a1 = 0, a2 = 0, b1 = 0, b2 = 0;   
    char str[] = "4294967277775321120 0xffffffff";
    const char fstr[] = "%o %o";
    int16_t res1 = st_sscanf(str, fstr, &a1, &b1);
    int16_t res2 = sscanf(str, fstr, &a2, &b2);
      ck_assert_int_eq(res1, res2);
    ck_assert_uint_eq(a1, a2);
    ck_assert_uint_eq(b1, b2);

#test sscanf_test_166
    unsigned short a1 = 0, a2 = 0, b1 = 0, b2 = 0;   
    char str[] = "1446744073707775516150 321";
    const char fstr[] = "%ho %ho";
    int16_t res1 = st_sscanf(str, fstr, &a1, &b1);
    int16_t res2 = sscanf(str, fstr, &a2, &b2);
      ck_assert_int_eq(res1, res2);
    ck_assert_uint_eq(a1, a2);
    ck_assert_uint_eq(b1, b2);


#test sscanf_test_170
    unsigned int a1 = 0, a2 = 0, b1 = 0, b2 = 0;   
    char str[] = "-4294967295321120 0xffffffff";
    const char fstr[] = "%i %i";
    int16_t res1 = st_sscanf(str, fstr, &a1, &b1);
    int16_t res2 = sscanf(str, fstr, &a2, &b2);
      ck_assert_int_eq(res1, res2);
    ck_assert_uint_eq(a1, a2);
    ck_assert_uint_eq(b1, b2);

#test sscanf_test_174
    unsigned int a1 = 0, a2 = 0, b1 = 0, b2 = 0;   
    char str[] = "-4294967277775321120 0xffffffff";
    const char fstr[] = "%o %o";
    int16_t res1 = st_sscanf(str, fstr, &a1, &b1);
    int16_t res2 = sscanf(str, fstr, &a2, &b2);
      ck_assert_int_eq(res1, res2);
    ck_assert_uint_eq(a1, a2);
    ck_assert_uint_eq(b1, b2);

#test sscanf_test_176
    unsigned short a1 = 0, a2 = 0, b1 = 0, b2 = 0;   
    char str[] = "-1446744073707775516150 321";
    const char fstr[] = "%ho %ho";
    int16_t res1 = st_sscanf(str, fstr, &a1, &b1);
    int16_t res2 = sscanf(str, fstr, &a2, &b2);
      ck_assert_int_eq(res1, res2);
    ck_assert_uint_eq(a1, a2);
    ck_assert_uint_eq(b1, b2);

#test sscanf_test_185
    int a1 = 5, a2 = 5; 
    char str[] = "00000004294967277775321120 nil  0x";
    const char fstr[] = "%4d";
    int16_t res1 = st_sscanf(str, fstr, &a1);
    int16_t res2 = sscanf(str, fstr, &a2);
      ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);

#test sscanf_test_186
    int a1 = 5, a2 = 5; 
    char str[] = "-00000004294967277775321120 nil  0x";
    const char fstr[] = "%4d";
    int16_t res1 = st_sscanf(str, fstr, &a1);
    int16_t res2 = sscanf(str, fstr, &a2);
      ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_188
    int a1 = 5, a2 = 5; 
    char str[] = "00000004234667277775321120 nil  0x";
    const char fstr[] = "%4i";
    int16_t res1 = st_sscanf(str, fstr, &a1);
    int16_t res2 = sscanf(str, fstr, &a2);
      ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);

#test sscanf_test_198
    unsigned short a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0,
                   d2 = 0;
    const char str[] = "1337 21 --5008 3000";
    const char fstr[] = "%0hu %0hu %1hu %2hu";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);




#test sscanf_test_201
    unsigned short a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0,
                   d2 = 0;
    const char str[] = "+1337 21 --5008 3000";
    const char fstr[] = "";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);
    

#test sscanf_test_202
    unsigned short a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0,
                   d2 = 0;
    const char str[] = "";
    const char fstr[] = "%0hu %0hu %1hu %2hu";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);    


#test sscanf_test_203
    unsigned short a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0,
                   d2 = 0;
    const char str[] = "1337 21 --5008 3000";
    const char fstr[] = "%";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);
    #ifdef __linux__
    ck_assert_int_eq(res1, res2);
    #endif
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);


#test sscanf_test_204
    char fstr[] = "%2s %1s %3s %0s";
    char str[] = "   a     b c d";
    
    char s1[512] = {'\0'};
    char s2[512] = {'\0'};
    char s3[512] = {'\0'};
    char s4[512] = {'\0'};

    char s5[512] = {'\0'};
    char s6[512] = {'\0'};
    char s7[512] = {'\0'};
    char s8[512] = {'\0'};

 
    int16_t res1 = st_sscanf((char*)str, fstr, s1, s2, s3, s4);
    int16_t res2 = sscanf((char*)str, fstr, s5, s6, s7, s8);

    ck_assert_int_eq(res1, res2);
       ck_assert_str_eq(s1, s5);
    ck_assert_str_eq(s2, s6);
    ck_assert_str_eq(s3, s7);
    ck_assert_str_eq(s4, s8);



#test sscanf_test_206
    unsigned short a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0,
                   d2 = 0;

    char fstr[] = "%2s %1s %3s %0s";
    char str[] = "   a     b c d";
    int16_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int16_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);    

#test sscanf_test_211
char fstr[] = "%c %c %c\t%c";
char str[] = "? S !   %   ";
int a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

int res1 = st_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);



#test sscanf_test_216
char format[] = "aaabb%*d%c";
char str[] = "";
char c1 = '?', c2 = '?';
int res1 = st_sscanf(str, format, &c1);
int res2 = sscanf(str, format, &c2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(c1, c2);


#test sscanf_test_228
long a1 = 0, a2 = 0, b1 = 0, b2 = 0;
char c1 = 0, c2 = 0;
const char str[] = "500-600";
const char fstr[] = "%li%c%li";

int res1 = st_sscanf(str, fstr, &a1, &c1, &b1);
int res2 = sscanf(str, fstr, &a2, &c2, &b2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);

#test sscanf_test_231
long a1 = 0, a2 = 0, b1 = 0, b2 = 0;
char c1 = 0, c2 = 0;
const char str[] = "500-600";
const char fstr[] = "%li%c%li";

int res1 = st_sscanf(str, fstr, &a1, &c1, &b1);
int res2 = sscanf(str, fstr, &a2, &c2, &b2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);

#test sscanf_test_232
long a1 = 0, a2 = 0, b1 = 0, b2 = 0;
char c1 = 0, c2 = 0;
const char str[] = "500-600";
const char fstr[] = "%li%c%li";

int res1 = st_sscanf(str, fstr, &a1, &c1, &b1);
int res2 = sscanf(str, fstr, &a2, &c2, &b2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);

#test sscanf_test_233
long a1 = 0, a2 = 0, b1 = 0, b2 = 0;
char c1 = 0, c2 = 0;
const char str[] = "500-600";
const char fstr[] = "%li%c%li";

int res1 = st_sscanf(str, fstr, &a1, &c1, &b1);
int res2 = sscanf(str, fstr, &a2, &c2, &b2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);

#test sscanf_test_234
  char format_str[100] = "%f";
  float number = .1;
  sprintf(origin_sprintf, format_str, number);
  st_sprintf(our_sprintf, format_str, number);
  ck_assert_str_eq(our_sprintf, origin_sprintf);


#test sscanf_test_236
  char format_str[100] = "%f";
  float number = 2.347;
  sprintf(origin_sprintf, format_str, number);
  st_sprintf(our_sprintf, format_str, number);
  ck_assert_str_eq(our_sprintf, origin_sprintf);

#test sscanf_test_237
    char a1, a2;
    char b1, b2;
    char c1, c2;
    char d1, d2;

    const char str[] = "%%$Char!StressssT%%estus!&&&";
    const char fstr[] = "%% %*c%*c%*c%*c%*c %c %c %c %c ### %*c";

    int32_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int32_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);
    ck_assert_int_eq(d1, d2);

#test sscanf_test_238
    char a1, a2;
    char b1, b2;
    char c1, c2;
    char d1, d2;
    const char str[] = "%%$Char!StressssVIm User Aboba %% %%% %%% %% % % %% % "
                       "% % %% % % %% %T%%estus!%%&&&";
    const char fstr[] = "%% %*c%*c%*c%*c%*c %c %c %c %c %% %% %% %% %% %% %% "
                        "%% %% %% %% %% %% %% %% %% ### %*c";

    int32_t res1 = st_sscanf((char*)str, fstr, &a1, &b1, &c1, &d1);
    int32_t res2 = sscanf((char*)str, fstr, &a2, &b2, &c2, &d2);

    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);
    ck_assert_int_eq(b1, b2);
    ck_assert_int_eq(c1, c2);


#test sscanf_test_239
    long a1 = 0, a2 = 0;
    const char str[] = "0000004";
    const char fstr[] = "%5ld";

    int16_t res1 = st_sscanf((char*)str, fstr, &a1);
    int16_t res2 = sscanf((char*)str, fstr, &a2);
    ck_assert_int_eq(res1, res2);
    ck_assert_int_eq(a1, a2);


#test sscanf_test_240
float a1 = 3, a2 = 3;
const char str[] = "e";
const char fstr[] = "%f";

int res1 = st_sscanf(str, fstr, &a1);
int res2 = sscanf(str, fstr, &a2);
ck_assert_int_eq(res1, res2);

